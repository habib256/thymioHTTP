    ##! Basic Thymio Motion AESL 
    ##! David J Sherman - david.sherman@inria.fr
    ##! Arnaud Verhille - gist974arobasegmailpointcom
    ##!
    ##! This AESL program defines high-level behaviors for the Thymio-II robot that enable
    ##! it to cooperate with programs like
    ##! Snap! with Nodejs and thymioHTTP REST API

    var R_state[29]          ##! [out] Robot FULL State

    var chronometer = 0      ##! BUSY Motors counter
    var busy = 0             ##! LOGO Motor Stuff
    var behavior = 0         ##! High Level Stuff

    var odo.delta ##! [out] @private instantaneous speed difference
    var odo.theta = 0 ##! [out] odometer current angle
    var odo.x = 0 ##! [out] odometer x
    var odo.y = 0 ##! [out] odometer y
    var odo.degree ##! [out] odometer direction

    # reusable temp vars for event handlers
    var tmp[9]
    var rgb[3]
    var i = 0

    # default value
    mic.threshold = 12

    ##! THYMIO UPDATE REPORTERS ##### 10Hz, 20 Hz, 100Hz ################
    ##! #################################################################   

    ##! 10 Hz THYMIO BROADCAST STATE
    onevent prox
        R_state[13] = prox.comm.rx
        R_state[14] = prox.comm.tx
        R_state[15] = prox.ground.delta[0]
        R_state[16] = prox.ground.delta[1]
        R_state[17] = prox.horizontal[0]
        R_state[18] = prox.horizontal[1]
        R_state[19] = prox.horizontal[2]
        R_state[20] = prox.horizontal[3]
        R_state[21] = prox.horizontal[4]
        R_state[22] = prox.horizontal[5]
        R_state[23] = prox.horizontal[6]
        R_state[24] = temperature     

        if (behavior == 1) then
            callsub behavior1
        end
        if (behavior == 2) then
            callsub behavior2
        end

    ##! 20 Hz THYMIO
    onevent buttons
        R_state[4] = button.backward
        R_state[5] = button.center
        R_state[6] = button.forward
        R_state[7] = button.left
        R_state[8] = button.right
        R_state[0] = acc[0]
        R_state[1] = acc[1]
        R_state[2] = acc[2]
        R_state[3] = mic.intensity 
        R_state[9] = motor.left.target
        R_state[10] = motor.right.target
        R_state[11] = motor.left.speed
        R_state[12] = motor.right.speed
        R_state[25] = odo.degree
        R_state[26] = odo.x
        R_state[27] = odo.y
        R_state[28] = busy
        
        emit R_state_update(R_state)
            

    ##! 100 Hz THYMIO
    onevent motor # loop runs at 100 Hz
        odo.delta = (motor.right.target + motor.left.target) / 2
        call math.muldiv(tmp[0], (motor.right.target - motor.left.target), 3406, 10000)
        odo.theta += tmp[0]
        call math.cos(tmp[0:1],[odo.theta,16384-odo.theta])
        call math.muldiv(tmp[0:1], [odo.delta,odo.delta],tmp[0:1], [32767,32767])
        odo.x += tmp[0]/45
        odo.y += tmp[1]/45
        odo.degree = 90 - (odo.theta / 182)

        if (busy == 1) then
            chronometer = chronometer - 1
            if (chronometer == 0) then
                motor.left.target = 0
                motor.right.target = 0
                busy = 0
            end
        end
                

    ##! THYMIO INTERNAL EVENTS ##########################################
    ##! #################################################################

    ##! PING THYMIO EVENTS
    onevent ping
        call math.rand(rgb)
        for i in 0:2 do
            rgb[i] = abs rgb[i]
            rgb[i] = rgb[i] % 20
        end
        call leds.top(rgb[0], rgb[1], rgb[2])
        i++
    ##!     emit pong i  

    ##! ODOMETER THYMIO EVENTS
    onevent Q_set_odometer
        odo.theta = (((event.args[0] + 360) % 360) - 90) * 182
        odo.x = event.args[1] * 28
        odo.y = event.args[2] * 28


    ##! LED THYMIO EVENTS
    onevent V_leds_prox_h
        call leds.prox.h(event.args[0],event.args[1],event.args[2],
                         event.args[3],event.args[4],event.args[5],
                         event.args[6],event.args[7])
    onevent V_leds_circle
        call leds.circle(event.args[0],event.args[1],event.args[2],
                         event.args[3],event.args[4],event.args[5],
                         event.args[6],event.args[7])
    onevent V_leds_top
        call leds.top(event.args[0],event.args[1],event.args[2])
    onevent V_leds_bottom_left
        call leds.bottom.left(event.args[0],event.args[1],event.args[2])
    onevent V_leds_bottom_right
        call leds.bottom.right(event.args[0],event.args[1],event.args[2])
    onevent V_leds_prox_v
        call leds.prox.v(event.args[0],event.args[1])
    onevent V_leds_buttons
        call leds.buttons(event.args[0],event.args[1],
                          event.args[2],event.args[3])    
    onevent V_leds_rc
        call leds.rc(event.args[0])   
    onevent V_leds_temperature
        call leds.temperature(event.args[0],event.args[1])
    onevent V_leds_sound
        call leds.sound(event.args[0])
    
    ##! SOUND THYMIO EVENTS
    onevent A_sound_freq
        call sound.freq(event.args[0],event.args[1])
    onevent A_sound_play
        call sound.play(event.args[0])
    onevent A_sound_system
        call sound.system(event.args[0])
    onevent A_sound_replay
        call sound.replay(event.args[0])
    onevent A_sound_record
        call sound.record(event.args[0])
    
    ##! MOTOR THYMIO EVENTS
    onevent M_motor_both 
        motor.left.target = event.args[0]
        motor.right.target = event.args[1] 
    onevent M_motor_left
        motor.left.target = event.args[0]
    onevent M_motor_right
        motor.right.target = event.args[0] 

    ##! SYNC LOGO MOTOR BUSY THYMIO ACTION STARTING EVENT
    onevent M_motor_timed
        behavior = 0
        busy = 1
        motor.left.target = event.args[0]
        motor.right.target = event.args[1]
        chronometer = event.args[2]

    ##! Reset the queue and stop motors
    onevent Q_reset
        chronometer = 0
        busy = 0
        behavior = 0  
        motor.left.target = 0
        motor.right.target = 0

    ##! THYMIO BEHAVIOR EVENTS

    onevent B_behavior
        behavior = event.args[0]

    ##! THYMIO BEHAVIORS SUBPROGRAMS
    ##! ############################################

    ##! Follow a black path very fast
    sub behavior1 
        if (prox.ground.delta[1] > 400) then
            motor.left.target = 100
            motor.right.target = 500
        elseif (prox.ground.delta[0] > 400) then
            motor.left.target = 500
            motor.right.target = 100
        else
            motor.left.target = 350
            motor.right.target = 350
        end

    ##! Follow a black path slowly
    sub behavior2  
